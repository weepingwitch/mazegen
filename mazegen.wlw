fun readfile{
  # read in the file #
  maze = filein(fileloc + argv);
  # make sure it exists #
  if (maze != 0)
  then {
    # split it by spaces #
    commands = maze / "\r\n";
    return commands;
  }
  else {
    print "Error: Maze not found: " + fileloc + argv;
    return 0;
  };
}



fun genarray{
  commands = argv;
  mazearray = [];
  # hold the line number #
  cnum = 0.0;
  # hold the curent token #
  ctoken = "null";
  while (ctoken != "END")
  then {
    ctoken = commands[cnum];
    # check for illegal end of file #
    if (ctoken == 0)
    then{
      ctoken = "END";
    };
    if (ctoken == "")
    then{
      # go to the next line #
      cnum = cnum + 1;
      ctoken = commands[cnum];
    };
    # process a new label #
    if (ctoken[0] == "L")
    then{
      # get the label number #
      labelnum = ctoken - "LABEL";
      # generate a blank label node #
      labelnode = [];
      # move to next line #
      cnum = cnum + 1;
      ctoken = commands[cnum];
      # get the label text #
      text = ctoken - "TEXT ";
      labelnode[0] = text;
      # move to next line #
      cnum = cnum + 1;
      ctoken = commands[cnum];
      if (ctoken[0] == "E")
      then{
        labelnode[1] = "END";
      }
      else{
        # generate an array of options #
        options = [];
        optionnum = 0;
        # read through options until we hit the next label #
        while (ctoken[0] != "L")
        then {
          # make a blank option #
          option = [];
          # read in the choice text #
          optiontext = ctoken - "CHOICE ";
          # go to the next line #
          cnum = cnum + 1;
          ctoken = commands[cnum];
          # read in the label to go to #
          optiongoto = ctoken - "GOTO ";
          # make the option #
          option[0] = optiontext;
          option[1] = optiongoto;
          # store it in the array #
          options[optionnum] = option;
          optionnum = optionnum + 1;
          # go to the next line #
          cnum = cnum + 1;
          ctoken = commands[cnum];
        };
        # store the options array in the label node #
        labelnode[1] = options;
      };
      # store the label node in the mazearray #
      mazearray[labelnum] = labelnode;
    };
    if (ctoken == "")
    then{
      # go to the next line #
      cnum = cnum + 1;
      ctoken = commands[cnum];
    }
  };
  # return the maze array #
  return mazearray;
}



fun executemaze{
  print "(Beginning maze)";
  print "";
  mazearray = argv;
  # start at the first label #
  pointer = 0;
  running = 1;
  # loop through labels #
  while (running)
  then{
    labelnode = [];
    # parse the label node #
    labelnode = mazearray[pointer];
    desc = labelnode[0];
    choices = labelnode[1];
    # print the description #
    print "";
    print desc;
    # check if at the end #
    if (choices == "END")
    then{
      print "";
      print "(Maze ended)";
      running = 0;
    }
    else{
      # iterate through choices #
      choicenum = 0;
      choicetext = choices[choicenum];
      while (choicetext != 0.0)
      then {
        # print out the choice #
        choicelabel = choicenum + 1;
        choicestring = choicelabel + ": " + choicetext[0];
        print choicestring;
        choicenum = choicenum + 1;
        choicetext = choices[choicenum];
      };
      choicenum = choicenum - 1;
      # get the user's answer #
      userchoice = prompt("? ");
      # parse where to go #
      userchoice = userchoice - 1;
      if (userchoice < 0)
      then{
        print "That wasn't a valid choice!";
        userchoice = -1;
      };
      if (userchoice > choicenum)
      then{
        print "That wasn't a valid choice!";
        userchoice = -1;
      };
      if (userchoice == -1)
      then{
        labelgoto = pointer;
      }
      else{
        labelgoto = choices[userchoice];
        labelgoto = labelgoto[1];
      };
      # go there #
      pointer = labelgoto;
    };
  };
}



fun main{
  # try to read in file name from command line #
  if (argv == [])
  then{
    # if not present, prompt user #
    mazefile = prompt("Maze filename? ");
  }
  else{
    mazefile = argv[0];
  };
  # generate the array of commands #
  commands = call(readfile)(mazefile);
  if (commands != 0.0)
  then{
      mazearray = call(genarray)(commands);
      call(executemaze)(mazearray);
  };




}
